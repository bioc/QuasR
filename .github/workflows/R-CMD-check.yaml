on:
  workflow_dispatch:
  push:
  pull_request:
    branches:
      - devel
  schedule:
    - cron: '0 8 * * 5'

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.image }}

    name: ${{ matrix.config.os }} (${{ matrix.config.bioc }} - ${{ matrix.config.image }})

    strategy:
      fail-fast: false
      matrix:
        config:
        #- { os: windows-latest, r: 'devel', bioc: 'devel'}
        - { os: macOS-latest, bioc: 'devel', covr: 'yes', pkgdown: 'yes', curlConfigPath: '/usr/bin/'}
        #- { os: macOS-latest, r: 'devel', bioc: 'devel', covr: 'yes', pkgdown: 'yes', curlConfigPath: '/usr/bin/'}
        #- { os: ubuntu-16.04, r: 'devel', bioc: 'devel', cran: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}
        #- { os: ubuntu-latest, r: 'devel', image: 'bioconductor/bioconductor_docker:devel', covr: 'no', pkgdown: 'no'}
        - { os: ubuntu-latest, image: 'bioconductor/bioconductor_docker:devel', covr: 'no', pkgdown: 'no'}
        #- { os: ubuntu-latest, r: 'release', image: 'bioconductor/bioconductor_docker:RELEASE_3_12'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      CURL_CONFIG: ${{ matrix.config.curlConfigPath }}curl-config

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up R and install BiocManager
        uses: grimbough/bioc-actions/setup-bioc@v1
        if: matrix.config.image == null
        with:
          bioc-version: ${{ matrix.config.bioc }}

      - name: Set up pandoc
        uses: r-lib/actions/setup-pandoc@v2
        if: matrix.config.image == null

      - name: Install remotes
        run: |
          install.packages('remotes')
        shell: Rscript {0}

      - name: Query dependencies
        run: |
          saveRDS(remotes::dev_package_deps(dependencies = TRUE, repos = c(getOption('repos'), BiocManager::repositories())), 'depends.Rds', version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows' && matrix.config.image == null
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}--bioc-${{ matrix.config.bioc }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ runner.os }}--bioc-${{ matrix.config.bioc }}-

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          pak-version: devel

      - name: Install macOS system dependencies
        if: runner.os == 'macOS'
        run: |
          brew install curl-openssl
          brew install harfbuzz
          brew install fribidi
          brew install jpeg fftw
          mkdir -p /Users/runner/.R
          touch /Users/runner/.R/Makevars
          echo 'export CPPFLAGS="-I/opt/homebrew/opt/jpeg/include"' >> /Users/runner/.R/Makevars
          echo 'export LDFLAGS="-L/opt/homebrew/opt/jpeg/lib"' >> /Users/runner/.R/Makevars
          echo 'export PKG_CONFIG_PATH="/opt/homebrew/opt/jpeg/lib/pkgconfig"' >> /Users/runner/.R/Makevars

      - name: Install Windows system dependencies
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install --no-progress openssl
          choco install --no-progress curl
          Write-Host "::add-path::C:\ProgramData\chocolatey\bin"
          Write-Host "::set-env name=LIBRARY_PATH::C:\ProgramData\chocolatey\lib\curl\tools:$($env:LIBRARY_PATH)"

      - name: Install R package dependencies
        run: |
          local_deps <- remotes::local_package_deps(dependencies = TRUE)
          deps <- remotes::dev_package_deps(dependencies = TRUE, repos = BiocManager::repositories())
          BiocManager::install(local_deps[local_deps %in% deps$package[deps$diff != 0]], Ncpu = 2L)
          remotes::install_cran('rcmdcheck', Ncpu = 2L)
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Build, Install, Check
        id: build-install-check
        uses: grimbough/bioc-actions/build-install-check@v1

      - name: Upload install log if the build/install/check step fails
        if: always() && (steps.build-install-check.outcome == 'failure')
        uses: actions/upload-artifact@v3
        with:
          name: install-log
          path: |
            ${{ steps.build-install-check.outputs.install-log }}

      - name: Show testthat output (windows)
        if: always() && runner.os == 'Windows'
        run: |
            type ${{ steps.build-install-check.outputs.check-dir }}\tests\testthat.Rout
        shell: cmd

      - name: Show testthat output (non-windows)
        if: always() && runner.os != 'Windows'
        run: |
            cat ${{ steps.build-install-check.outputs.check-dir }}/tests/testthat.Rout
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-bioc${{ matrix.config.bioc }}-results
          path: ${{ steps.build-install-check.outputs.check-dir }}

      - name: Run BiocCheck
        uses: grimbough/bioc-actions/run-BiocCheck@v1
        with:
          arguments: '--no-check-bioc-views --no-check-bioc-help'
          error-on: 'never'

      - name: Test coverage
        if: github.event_name == 'push' && github.ref == 'refs/heads/devel' && matrix.config.covr == 'yes'
        run: |
          install.packages("covr")
          covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")
        shell: Rscript {0}

      - name: Deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/devel' && matrix.config.pkgdown == 'yes'
        run: |
          R CMD INSTALL .
          Rscript -e "remotes::install_cran('pkgdown'); pkgdown::deploy_to_branch(new_process = FALSE)"
